{"version":3,"sources":["../node_modules/shortid/lib/alphabet.js","../node_modules/shortid/index.js","../node_modules/shortid/lib/index.js","../node_modules/shortid/lib/random/random-from-seed.js","../node_modules/shortid/lib/build.js","../node_modules/shortid/lib/generate.js","../node_modules/shortid/lib/random/random-byte-browser.js","../node_modules/shortid/node_modules/nanoid/format.browser.js","../node_modules/shortid/lib/is-valid.js","../node_modules/shortid/lib/util/cluster-worker-id-browser.js","components/ContactForm/ContactForm.module.css","components/ContactList/ContactList.module.css","components/Filter/Filter.module.css","views/ContactsView.module.css","components/ContactForm/ContactForm.js","redux/contacts/contacts-selectors.js","components/ContactList/ContactList.js","redux/contacts/contacts-operations.js","components/Filter/Filter.js","views/ContactsView.js"],"names":["alphabet","previousSeed","shuffled","randomFromSeed","require","ORIGINAL","reset","setCharacters","_alphabet_","length","Error","unique","split","filter","item","ind","arr","lastIndexOf","join","getShuffled","characterIndex","sourceArray","targetArray","r","nextValue","Math","floor","push","splice","shuffle","module","exports","get","characters","seed","lookup","index","build","isValid","clusterWorkerId","generate","seedValue","worker","workerId","newCharacters","undefined","_seed_","counter","previousSeconds","str","seconds","Date","now","random","format","number","done","loopCounter","pow","randomByte","crypto","window","msCrypto","getRandomValues","size","Uint8Array","bytes","i","mask","log","LN2","step","id","RegExp","replace","test","ContactForm","useState","name","setName","setNumber","contacts","setContacts","useCreateContactMutation","createContact","isLoading","data","useFetchContactsQuery","useEffect","a","handleChange","event","target","value","nameInputId","shortid","numberInputId","handleSubmit","e","preventDefault","contact","toast","error","duration","style","color","backgroundColor","find","toLowerCase","success","className","s","form","onSubmit","htmlFor","span","input","type","onChange","pattern","title","required","btn","disabled","height","width","getFilter","state","ContactList","isFetching","useSelector","useDeleteContactMutation","deleteContact","normalizedFilter","trim","includes","getVisibleContacts","map","btnList","onClick","axios","defaults","baseURL","filterInputId","Filter","dispatch","useDispatch","changeFilter","ContactsView","container"],"mappings":"gJAEA,IAGIA,EACAC,EAEAC,EANAC,EAAiBC,EAAQ,KAEzBC,EAAW,mEAMf,SAASC,IACLJ,GAAW,EAGf,SAASK,EAAcC,GACnB,GAAKA,GAQL,GAAIA,IAAeR,EAAnB,CAIA,GAAIQ,EAAWC,SAAWJ,EAASI,OAC/B,MAAM,IAAIC,MAAM,uCAAyCL,EAASI,OAAS,qCAAuCD,EAAWC,OAAS,gBAAkBD,GAG5J,IAAIG,EAASH,EAAWI,MAAM,IAAIC,QAAO,SAASC,EAAMC,EAAKC,GAC1D,OAAOD,IAAQC,EAAIC,YAAYH,MAGlC,GAAIH,EAAOF,OACP,MAAM,IAAIC,MAAM,uCAAyCL,EAASI,OAAS,yDAA2DE,EAAOO,KAAK,OAGtJlB,EAAWQ,EACXF,UAxBQN,IAAaK,IACbL,EAAWK,EACXC,KAwDZ,SAASa,IACL,OAAIjB,IAGJA,EAtBJ,WACSF,GACDO,EAAcF,GAQlB,IALA,IAGIe,EAHAC,EAAcrB,EAASY,MAAM,IAC7BU,EAAc,GACdC,EAAIpB,EAAeqB,YAGhBH,EAAYZ,OAAS,GACxBc,EAAIpB,EAAeqB,YACnBJ,EAAiBK,KAAKC,MAAMH,EAAIF,EAAYZ,QAC5Ca,EAAYK,KAAKN,EAAYO,OAAOR,EAAgB,GAAG,IAE3D,OAAOE,EAAYJ,KAAK,IAObW,IAkBfC,EAAOC,QAAU,CACbC,IALJ,WACE,OAAOhC,GAAYK,GAKjB4B,WAvDJ,SAAoBzB,GAEhB,OADAD,EAAcC,GACPR,GAsDPkC,KAnDJ,SAAiBA,GACb/B,EAAe+B,KAAKA,GAChBjC,IAAiBiC,IACjB5B,IACAL,EAAeiC,IAgDnBC,OAbJ,SAAgBC,GAEZ,OADuBjB,IACCiB,IAYxBlC,SAAUiB,I,iCCpGdW,EAAOC,QAAU3B,EAAQ,M,iCCCzB,IAAIJ,EAAWI,EAAQ,KACnBiC,EAAQjC,EAAQ,KAChBkC,EAAUlC,EAAQ,KAMlBmC,EAAkBnC,EAAQ,MAA+B,EAyC7D,SAASoC,IACP,OAAOH,EAAME,GAIfT,EAAOC,QAAUS,EACjBV,EAAOC,QAAQS,SAAWA,EAC1BV,EAAOC,QAAQG,KAxCf,SAAcO,GAEV,OADAzC,EAASkC,KAAKO,GACPX,EAAOC,SAuClBD,EAAOC,QAAQW,OA9Bf,SAAgBC,GAEZ,OADAJ,EAAkBI,EACXb,EAAOC,SA6BlBD,EAAOC,QAAQE,WArBf,SAAoBW,GAKhB,YAJsBC,IAAlBD,GACA5C,EAASiC,WAAWW,GAGjB5C,EAASE,YAiBpB4B,EAAOC,QAAQO,QAAUA,G,iCCxDzB,IAAIJ,EAAO,EAgBXJ,EAAOC,QAAU,CACbP,UAVJ,WAEI,OADAU,GAAe,KAAPA,EAAc,OAAS,QAClB,QASbA,KANJ,SAAiBY,GACbZ,EAAOY,K,iCChBX,IAaIC,EAGAC,EAhBAR,EAAWpC,EAAQ,KACRA,EAAQ,KA0CvB0B,EAAOC,QArBP,SAAeQ,GACX,IAAIU,EAAM,GAENC,EAAUzB,KAAKC,MAAmC,MAA5ByB,KAAKC,MAnBjB,gBAkCd,OAbIF,IAAYF,EACZD,KAEAA,EAAU,EACVC,EAAkBE,GAGtBD,GAAYT,EAxBF,GAyBVS,GAAYT,EAASD,GACjBQ,EAAU,IACVE,GAAYT,EAASO,IAEzBE,GAAYT,EAASU,K,iCCvCzB,IAAIlD,EAAWI,EAAQ,KACnBiD,EAASjD,EAAQ,KACjBkD,EAASlD,EAAQ,KAgBrB0B,EAAOC,QAdP,SAAkBwB,GAMd,IALA,IACIC,EADAC,EAAc,EAGdR,EAAM,IAEFO,GACJP,GAAYK,EAAOD,EAAQrD,EAASgC,MAAO,GAC3CwB,EAAOD,EAAU9B,KAAKiC,IAAI,GAAID,EAAc,GAC5CA,IAEJ,OAAOR,I,iCCfX,IAEIU,EAFAC,EAA2B,kBAAXC,SAAwBA,OAAOD,QAAUC,OAAOC,UAahEH,EATCC,GAAWA,EAAOG,gBASN,SAASC,GAClB,OAAOJ,EAAOG,gBAAgB,IAAIE,WAAWD,KATpC,SAASA,GAElB,IADA,IAAIE,EAAQ,GACHC,EAAI,EAAGA,EAAIH,EAAMG,IACtBD,EAAMvC,KAAKF,KAAKC,MAAsB,IAAhBD,KAAK4B,WAE/B,OAAOa,GAQfpC,EAAOC,QAAU4B,G,kBCjBjB7B,EAAOC,QAAU,SAAUsB,EAAQrD,EAAUgE,GAwB3C,IAlBA,IAAII,GAAQ,GAAK3C,KAAK4C,IAAIrE,EAASS,OAAS,GAAKgB,KAAK6C,KAAO,EAezDC,KAAU,IAAMH,EAAOJ,EAAOhE,EAASS,QACvC+D,EAAK,KAMP,IAHA,IAAIN,EAAQb,EAAOkB,GAEfJ,EAAII,EACDJ,KAKL,IAFAK,GAAMxE,EAASkE,EAAMC,GAAKC,IAAS,IAE5B3D,UAAYuD,EAAM,OAAOQ,I,iCCnCtC,IAAIxE,EAAWI,EAAQ,KAavB0B,EAAOC,QAXP,SAAmByC,GACf,SAAKA,GAAoB,kBAAPA,GAAmBA,EAAG/D,OAAS,KAI7B,IAAIgE,OAAO,KAC7BzE,EAASgC,MAAM0C,QAAQ,uBAAwB,QACjD,KACsBC,KAAKH,K,iCCT/B1C,EAAOC,QAAU,G,oBCDjBD,EAAOC,QAAU,CAAC,KAAO,0BAA0B,MAAQ,2BAA2B,KAAO,0BAA0B,IAAM,2B,oBCA7HD,EAAOC,QAAU,CAAC,KAAO,0BAA0B,KAAO,0BAA0B,SAAW,8BAA8B,QAAU,+B,oBCAvID,EAAOC,QAAU,CAAC,MAAQ,sBAAsB,KAAO,qBAAqB,MAAQ,wB,oBCApFD,EAAOC,QAAU,CAAC,UAAY,kC,gKC4Jf6C,MAnJf,WACE,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA4BF,mBAAS,IAArC,mBAAOtB,EAAP,KAAeyB,EAAf,KAEA,EAAgCH,mBAAS,IAAzC,mBAAOI,EAAP,KAAiBC,EAAjB,KAEA,EAAuCC,cAAvC,mBAAOC,EAAP,KAAwBC,EAAxB,KAAwBA,UAChBC,EAASC,cAATD,KAERE,qBAAU,WACR,sBAAC,sBAAAC,EAAA,sEACOH,EADP,OAEKA,GACFJ,EAAYI,GAHf,0CAAD,KAMC,CAACA,IAEJ,IAAMI,EAAe,SAAAC,GACnB,MAAwBA,EAAMC,OAAtBd,EAAR,EAAQA,KAAMe,EAAd,EAAcA,MAEd,OAAQf,GACN,IAAK,OACHC,EAAQc,GACR,MAEF,IAAK,SACHb,EAAUa,GACV,MAEF,QACE,SAIAC,EAAcC,IAAQvD,WACtBwD,EAAgBD,IAAQvD,WAExByD,EAAY,uCAAG,WAAMC,GAAN,eAAAT,EAAA,yDACnBS,EAAEC,iBACIC,EAAU,CACdtB,KAAMA,EACNvB,OAAQA,GAGG,KAATuB,GACFuB,IAAMC,MAAM,4BAA6B,CACvCC,SAAU,IACVC,MAAO,CACLC,MAAO,OACPC,gBAAiB,aAKR,KAAXnD,GACF8C,IAAMC,MAAM,8BAA+B,CACzCC,SAAU,IACVC,MAAO,CACLC,MAAO,OACPC,gBAAiB,cAKnBzB,EAAS0B,MAAK,SAAAP,GAAO,OAAItB,EAAK8B,gBAAkBR,EAAQtB,KAAK8B,iBA3B9C,uBA4BjBP,IAAMC,MAAM,6BAA8B,CACxCC,SAAU,IACVC,MAAO,CACLC,MAAO,OACPC,gBAAiB,aAGrBpG,IAnCiB,0BAsCfwE,GAAQvB,IACV6B,EAAcgB,GAEd9F,IAEA+F,IAAMQ,QAAQ,gBAAiB,CAC7BN,SAAU,IAEVC,MAAO,CACLC,MAAO,OACPC,gBAAiB,cAhDJ,2CAAH,sDAsDZpG,EAAQ,WACZyE,EAAQ,IACRC,EAAU,KAGZ,OACE,uBAAM8B,UAAWC,IAAEC,KAAMC,SAAUhB,EAAnC,UACE,wBAAOiB,QAASpB,EAAhB,UACE,sBAAMgB,UAAWC,IAAEI,KAAnB,kBAEA,uBACEL,UAAWC,IAAEK,MACbC,KAAK,OACLvC,KAAK,OACLe,MAAOf,EACPwC,SAAU5B,EACVlB,GAAIsB,EACJyB,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,OAIZ,wBAAOP,QAASlB,EAAhB,UACE,sBAAMc,UAAWC,IAAEI,KAAnB,oBAEA,uBACEL,UAAWC,IAAEK,MACbC,KAAK,MACLvC,KAAK,SACLe,MAAOtC,EACP+D,SAAU5B,EACVlB,GAAIwB,EACJuB,QAAQ,yFACRC,MAAM,giBACNC,UAAQ,OAGZ,uBAEA,yBAAQX,UAAWC,IAAEW,IAAKL,KAAK,SAASM,SAAUtC,EAAlD,UACGA,GACC,cAAC,IAAD,CAAQyB,UAAU,SAASO,KAAK,YAAYZ,MAAM,OAAOmB,OAAQ,GAAIC,MAAO,KAFhF,qB,yBC5IAC,EAAY,SAAAC,GAAK,OAAIA,EAAM9C,SAASpE,QCwD3BmH,EA9CK,WAAO,IAAD,EACxB,EAAgCnD,mBAAS,IAAzC,mBAAOI,EAAP,KAAiBC,EAAjB,KAEA,EAA6BK,cAArBD,EAAR,EAAQA,KAAM2C,EAAd,EAAcA,WAEdzC,qBAAU,WACR,sBAAC,sBAAAC,EAAA,sEACOH,EADP,OAEKA,GACFJ,EAAYI,GAHf,0CAAD,KAMC,CAACA,IAEJ,IAAMzE,EAASqH,YAAYJ,GAY3B,EAAwBK,cAAjBC,EAAP,oBAEA,OACE,qBAAItB,UAAU,SAAd,UACGmB,GAAc,cAAC,IAAD,CAAQZ,KAAK,OAAOZ,MAAM,UAAUmB,OAAQ,GAAIC,MAAO,KACrE5C,IAAQ,UAfc,SAACA,EAAUpE,GACpC,IAAMwH,EAAmBxH,EAAO+F,cAAc0B,OAE9C,OAAOrD,EAASpE,QACd,SAAAuF,GAAO,OACLA,EAAQtB,KAAK8B,cAAc2B,SAASF,IAAqBjC,EAAQ7C,OAAOgF,SAAS1H,MAWjF2H,CAAmBvD,EAAUpE,UADtB,aACP,EAAsC4H,KAAI,gBAAGjE,EAAH,EAAGA,GAAIM,EAAP,EAAOA,KAAMvB,EAAb,EAAaA,OAAb,OACxC,qBAAauD,UAAWC,IAAEjG,KAA1B,UACE,oBAAGgG,UAAU,aAAb,UACGhC,EADH,KACU,+BAAOvB,OAEjB,wBAAQ8D,KAAK,SAASP,UAAWC,IAAE2B,QAASC,QAAS,kBAAMP,EAAc5D,IAAzE,sBAJOA,W,mDChCnBoE,IAAMC,SAASC,QAAU,yCAEzB,ICPMC,EAAgBhD,IAAQvD,WAsBfwG,EApBA,WACb,IAAMnI,EAASqH,YAAYJ,GAErBmB,EAAWC,cAGjB,OACE,wBAAOhC,QAAS6B,EAAhB,UACE,sBAAMjC,UAAWC,IAAEI,KAAnB,8CACA,uBACEL,UAAWC,IAAEK,MACbC,KAAK,OACLxB,MAAOhF,EACPyG,SATiB,SAAApB,GAAC,OAAI+C,EAASE,YAAajD,EAAEN,OAAOC,SAUrDrB,GAAIuE,Q,kBCPGK,UAZf,WACE,OACE,sBAAKtC,UAAWC,IAAEsC,UAAlB,UACE,2CACA,cAAC,EAAD,IACA,0CACA,cAAC,EAAD,IACA,cAAC,EAAD","file":"static/js/3.23c5fc9d.chunk.js","sourcesContent":["'use strict';\n\nvar randomFromSeed = require('./random/random-from-seed');\n\nvar ORIGINAL = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-';\nvar alphabet;\nvar previousSeed;\n\nvar shuffled;\n\nfunction reset() {\n    shuffled = false;\n}\n\nfunction setCharacters(_alphabet_) {\n    if (!_alphabet_) {\n        if (alphabet !== ORIGINAL) {\n            alphabet = ORIGINAL;\n            reset();\n        }\n        return;\n    }\n\n    if (_alphabet_ === alphabet) {\n        return;\n    }\n\n    if (_alphabet_.length !== ORIGINAL.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. You submitted ' + _alphabet_.length + ' characters: ' + _alphabet_);\n    }\n\n    var unique = _alphabet_.split('').filter(function(item, ind, arr){\n       return ind !== arr.lastIndexOf(item);\n    });\n\n    if (unique.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. These characters were not unique: ' + unique.join(', '));\n    }\n\n    alphabet = _alphabet_;\n    reset();\n}\n\nfunction characters(_alphabet_) {\n    setCharacters(_alphabet_);\n    return alphabet;\n}\n\nfunction setSeed(seed) {\n    randomFromSeed.seed(seed);\n    if (previousSeed !== seed) {\n        reset();\n        previousSeed = seed;\n    }\n}\n\nfunction shuffle() {\n    if (!alphabet) {\n        setCharacters(ORIGINAL);\n    }\n\n    var sourceArray = alphabet.split('');\n    var targetArray = [];\n    var r = randomFromSeed.nextValue();\n    var characterIndex;\n\n    while (sourceArray.length > 0) {\n        r = randomFromSeed.nextValue();\n        characterIndex = Math.floor(r * sourceArray.length);\n        targetArray.push(sourceArray.splice(characterIndex, 1)[0]);\n    }\n    return targetArray.join('');\n}\n\nfunction getShuffled() {\n    if (shuffled) {\n        return shuffled;\n    }\n    shuffled = shuffle();\n    return shuffled;\n}\n\n/**\n * lookup shuffled letter\n * @param index\n * @returns {string}\n */\nfunction lookup(index) {\n    var alphabetShuffled = getShuffled();\n    return alphabetShuffled[index];\n}\n\nfunction get () {\n  return alphabet || ORIGINAL;\n}\n\nmodule.exports = {\n    get: get,\n    characters: characters,\n    seed: setSeed,\n    lookup: lookup,\n    shuffled: getShuffled\n};\n","'use strict';\nmodule.exports = require('./lib/index');\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar build = require('./build');\nvar isValid = require('./is-valid');\n\n// if you are using cluster or multiple servers use this to make each instance\n// has a unique value for worker\n// Note: I don't know if this is automatically set when using third\n// party cluster solutions such as pm2.\nvar clusterWorkerId = require('./util/cluster-worker-id') || 0;\n\n/**\n * Set the seed.\n * Highly recommended if you don't want people to try to figure out your id schema.\n * exposed as shortid.seed(int)\n * @param seed Integer value to seed the random alphabet.  ALWAYS USE THE SAME SEED or you might get overlaps.\n */\nfunction seed(seedValue) {\n    alphabet.seed(seedValue);\n    return module.exports;\n}\n\n/**\n * Set the cluster worker or machine id\n * exposed as shortid.worker(int)\n * @param workerId worker must be positive integer.  Number less than 16 is recommended.\n * returns shortid module so it can be chained.\n */\nfunction worker(workerId) {\n    clusterWorkerId = workerId;\n    return module.exports;\n}\n\n/**\n *\n * sets new characters to use in the alphabet\n * returns the shuffled alphabet\n */\nfunction characters(newCharacters) {\n    if (newCharacters !== undefined) {\n        alphabet.characters(newCharacters);\n    }\n\n    return alphabet.shuffled();\n}\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction generate() {\n  return build(clusterWorkerId);\n}\n\n// Export all other functions as properties of the generate function\nmodule.exports = generate;\nmodule.exports.generate = generate;\nmodule.exports.seed = seed;\nmodule.exports.worker = worker;\nmodule.exports.characters = characters;\nmodule.exports.isValid = isValid;\n","'use strict';\n\n// Found this seed-based random generator somewhere\n// Based on The Central Randomizer 1.3 (C) 1997 by Paul Houle (houle@msc.cornell.edu)\n\nvar seed = 1;\n\n/**\n * return a random number based on a seed\n * @param seed\n * @returns {number}\n */\nfunction getNextValue() {\n    seed = (seed * 9301 + 49297) % 233280;\n    return seed/(233280.0);\n}\n\nfunction setSeed(_seed_) {\n    seed = _seed_;\n}\n\nmodule.exports = {\n    nextValue: getNextValue,\n    seed: setSeed\n};\n","'use strict';\n\nvar generate = require('./generate');\nvar alphabet = require('./alphabet');\n\n// Ignore all milliseconds before a certain time to reduce the size of the date entropy without sacrificing uniqueness.\n// This number should be updated every year or so to keep the generated id short.\n// To regenerate `new Date() - 0` and bump the version. Always bump the version!\nvar REDUCE_TIME = 1567752802062;\n\n// don't change unless we change the algos or REDUCE_TIME\n// must be an integer and less than 16\nvar version = 7;\n\n// Counter is used when shortid is called multiple times in one second.\nvar counter;\n\n// Remember the last time shortid was called in case counter is needed.\nvar previousSeconds;\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction build(clusterWorkerId) {\n    var str = '';\n\n    var seconds = Math.floor((Date.now() - REDUCE_TIME) * 0.001);\n\n    if (seconds === previousSeconds) {\n        counter++;\n    } else {\n        counter = 0;\n        previousSeconds = seconds;\n    }\n\n    str = str + generate(version);\n    str = str + generate(clusterWorkerId);\n    if (counter > 0) {\n        str = str + generate(counter);\n    }\n    str = str + generate(seconds);\n    return str;\n}\n\nmodule.exports = build;\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar random = require('./random/random-byte');\nvar format = require('nanoid/format');\n\nfunction generate(number) {\n    var loopCounter = 0;\n    var done;\n\n    var str = '';\n\n    while (!done) {\n        str = str + format(random, alphabet.get(), 1);\n        done = number < (Math.pow(16, loopCounter + 1 ) );\n        loopCounter++;\n    }\n    return str;\n}\n\nmodule.exports = generate;\n","'use strict';\n\nvar crypto = typeof window === 'object' && (window.crypto || window.msCrypto); // IE 11 uses window.msCrypto\n\nvar randomByte;\n\nif (!crypto || !crypto.getRandomValues) {\n    randomByte = function(size) {\n        var bytes = [];\n        for (var i = 0; i < size; i++) {\n            bytes.push(Math.floor(Math.random() * 256));\n        }\n        return bytes;\n    };\n} else {\n    randomByte = function(size) {\n        return crypto.getRandomValues(new Uint8Array(size));\n    };\n}\n\nmodule.exports = randomByte;\n","// This file replaces `format.js` in bundlers like webpack or Rollup,\n// according to `browser` config in `package.json`.\n\nmodule.exports = function (random, alphabet, size) {\n  // We can’t use bytes bigger than the alphabet. To make bytes values closer\n  // to the alphabet, we apply bitmask on them. We look for the closest\n  // `2 ** x - 1` number, which will be bigger than alphabet size. If we have\n  // 30 symbols in the alphabet, we will take 31 (00011111).\n  // We do not use faster Math.clz32, because it is not available in browsers.\n  var mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1\n  // Bitmask is not a perfect solution (in our example it will pass 31 bytes,\n  // which is bigger than the alphabet). As a result, we will need more bytes,\n  // than ID size, because we will refuse bytes bigger than the alphabet.\n\n  // Every hardware random generator call is costly,\n  // because we need to wait for entropy collection. This is why often it will\n  // be faster to ask for few extra bytes in advance, to avoid additional calls.\n\n  // Here we calculate how many random bytes should we call in advance.\n  // It depends on ID length, mask / alphabet size and magic number 1.6\n  // (which was selected according benchmarks).\n\n  // -~f => Math.ceil(f) if n is float number\n  // -~i => i + 1 if n is integer number\n  var step = -~(1.6 * mask * size / alphabet.length)\n  var id = ''\n\n  while (true) {\n    var bytes = random(step)\n    // Compact alternative for `for (var i = 0; i < step; i++)`\n    var i = step\n    while (i--) {\n      // If random byte is bigger than alphabet even after bitmask,\n      // we refuse it by `|| ''`.\n      id += alphabet[bytes[i] & mask] || ''\n      // More compact than `id.length + 1 === size`\n      if (id.length === +size) return id\n    }\n  }\n}\n","'use strict';\nvar alphabet = require('./alphabet');\n\nfunction isShortId(id) {\n    if (!id || typeof id !== 'string' || id.length < 6 ) {\n        return false;\n    }\n\n    var nonAlphabetic = new RegExp('[^' +\n      alphabet.get().replace(/[|\\\\{}()[\\]^$+*?.-]/g, '\\\\$&') +\n    ']');\n    return !nonAlphabetic.test(id);\n}\n\nmodule.exports = isShortId;\n","'use strict';\n\nmodule.exports = 0;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__2zy6B\",\"input\":\"ContactForm_input__YbjY9\",\"span\":\"ContactForm_span__nzi6_\",\"btn\":\"ContactForm_btn__2Ikzx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__1SA16\",\"item\":\"ContactList_item__Z2FPl\",\"contacts\":\"ContactList_contacts__DQpRw\",\"btnList\":\"ContactList_btnList__sFi4S\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__2g8Z3\",\"span\":\"Filter_span__xJjqr\",\"input\":\"Filter_input__3UZ0i\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ContactsView_container__Wio_9\"};","import { useState, useEffect } from 'react';\n\nimport PropTypes from 'prop-types';\nimport shortid from 'shortid';\nimport s from './ContactForm.module.css';\nimport { toast } from 'react-hot-toast';\n\nimport { useCreateContactMutation, useFetchContactsQuery } from 'redux/contacts/contactsSlice';\nimport Loader from 'react-loader-spinner';\n\nfunction ContactForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const [contacts, setContacts] = useState([]);\n\n  const [createContact, { isLoading }] = useCreateContactMutation();\n  const { data } = useFetchContactsQuery();\n\n  useEffect(() => {\n    (async () => {\n      await data;\n      if (data) {\n        setContacts(data);\n      }\n    })();\n  }, [data]);\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const nameInputId = shortid.generate();\n  const numberInputId = shortid.generate();\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const contact = {\n      name: name,\n      number: number,\n    };\n\n    if (name === '') {\n      toast.error('The name cannot be empty!', {\n        duration: 3000,\n        style: {\n          color: '#fff',\n          backgroundColor: '#c40b0b',\n        },\n      });\n    }\n\n    if (number === '') {\n      toast.error('The number cannot be empty!', {\n        duration: 3000,\n        style: {\n          color: '#fff',\n          backgroundColor: '#c40b0b',\n        },\n      });\n    }\n\n    if (contacts.find(contact => name.toLowerCase() === contact.name.toLowerCase())) {\n      toast.error('Contact is already on the ', {\n        duration: 3000,\n        style: {\n          color: '#fff',\n          backgroundColor: '#c40b0b',\n        },\n      });\n      reset();\n      return;\n    }\n    if (name && number) {\n      createContact(contact);\n\n      reset();\n\n      toast.success('Contact added', {\n        duration: 3000,\n\n        style: {\n          color: '#fff',\n          backgroundColor: '#23dd23',\n        },\n      });\n    }\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form className={s.form} onSubmit={handleSubmit}>\n      <label htmlFor={nameInputId}>\n        <span className={s.span}>Name</span>\n\n        <input\n          className={s.input}\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={handleChange}\n          id={nameInputId}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n        />\n      </label>\n\n      <label htmlFor={numberInputId}>\n        <span className={s.span}>Number</span>\n\n        <input\n          className={s.input}\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          onChange={handleChange}\n          id={numberInputId}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n        />\n      </label>\n      <br />\n\n      <button className={s.btn} type=\"submit\" disabled={isLoading}>\n        {isLoading && (\n          <Loader className=\"Loader\" type=\"ThreeDots\" color=\"blue\" height={15} width={15} />\n        )}\n        Add contact\n      </button>\n    </form>\n  );\n}\n\nContactForm.propTypes = {\n  name: PropTypes.string,\n  number: PropTypes.string,\n};\n\nexport default ContactForm;\n","// import { createSelector } from '@reduxjs/toolkit';\r\n\r\nconst getFilter = state => state.contacts.filter;\r\n\r\nconst getAllContacts = state => state.contacts.items;\r\n\r\n// const sortAllContacts = createSelector([getAllContacts], contacts => {\r\n//   return contacts.slice().sort((a, b) => b.id - a.id);\r\n// });\r\n// const getVisibleContacts = createSelector([sortAllContacts, getFilter], (contacts, filter) => {\r\n//   const normalizedFilter = filter.toLowerCase().trim();\r\n//   return contacts.filter(\r\n//     contact =>\r\n//       contact.name.toLowerCase().includes(normalizedFilter) || contact.number.includes(filter),\r\n//   );\r\n// });\r\n\r\nconst getVisibleContacts = (contacts, filter) => {\r\n  const normalizedFilter = filter.toLowerCase().trim();\r\n\r\n  return contacts.filter(\r\n    contact =>\r\n      contact.name.toLowerCase().includes(normalizedFilter) || contact.phone.includes(filter),\r\n  );\r\n};\r\n\r\n// export { getFilter, getVisibleContacts, getAllContacts, sortAllContacts };\r\nexport { getFilter, getVisibleContacts, getAllContacts };\r\n","// import React from 'react';\nimport { useState, useEffect } from 'react';\n// import { useEffect } from 'react';\n// import { useDispatch } from 'react-redux';\n\nimport { useSelector } from 'react-redux';\nimport s from './ContactList.module.css';\nimport { getFilter } from 'redux/contacts/contacts-selectors';\nimport { useDeleteContactMutation, useFetchContactsQuery } from 'redux/contacts/contactsSlice';\n// import { authSelectors } from 'redux/auth';\nimport Loader from 'react-loader-spinner';\n\nconst ContactList = () => {\n  const [contacts, setContacts] = useState([]);\n\n  const { data, isFetching } = useFetchContactsQuery();\n\n  useEffect(() => {\n    (async () => {\n      await data;\n      if (data) {\n        setContacts(data);\n      }\n    })();\n  }, [data]);\n\n  const filter = useSelector(getFilter);\n\n  const getVisibleContacts = (contacts, filter) => {\n    const normalizedFilter = filter.toLowerCase().trim();\n\n    return contacts.filter(\n      contact =>\n        contact.name.toLowerCase().includes(normalizedFilter) || contact.number.includes(filter),\n    );\n  };\n  // const { data: contacts, isFetching } = useFetchContactsQuery();\n\n  const [deleteContact] = useDeleteContactMutation();\n\n  return (\n    <ul className=\"s.list\">\n      {isFetching && <Loader type=\"Oval\" color=\"#00BFFF\" height={32} width={32} />}\n      {contacts &&\n        getVisibleContacts(contacts, filter)?.map(({ id, name, number }) => (\n          <li key={id} className={s.item}>\n            <p className=\"s.contacts\">\n              {name}: <span>{number}</span>\n            </p>\n            <button type=\"button\" className={s.btnList} onClick={() => deleteContact(id)}>\n              Delete\n            </button>\n          </li>\n        ))}\n    </ul>\n  );\n};\n\nexport default ContactList;\n","import axios from 'axios';\r\nimport {\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n} from './contacts-actions';\r\n\r\naxios.defaults.baseURL = 'https://connections-api.herokuapp.com/';\r\n\r\nconst fetchContacts = () => async dispatch => {\r\n  dispatch(fetchContactsRequest());\r\n\r\n  axios\r\n    .get('/contacts')\r\n    .then(({ data }) => dispatch(fetchContactsSuccess(data)))\r\n    .catch(error => dispatch(fetchContactsError(error)));\r\n};\r\n\r\nconst addContact =\r\n  ({ name, number }) =>\r\n  dispatch => {\r\n    const contact = {\r\n      name,\r\n      number,\r\n      completed: false,\r\n    };\r\n\r\n    dispatch(addContactRequest());\r\n\r\n    axios\r\n      .post('/contacts', contact)\r\n      .then(({ data }) => dispatch(addContactSuccess(data)))\r\n      .catch(error => dispatch(addContactError(error)));\r\n  };\r\n\r\nconst deleteContact = contactId => dispatch => {\r\n  dispatch(deleteContactRequest());\r\n\r\n  axios\r\n    .delete(`/contacts/${contactId}`)\r\n    .then(() => dispatch(deleteContactSuccess(contactId)))\r\n    .catch(error => dispatch(deleteContactError(error)));\r\n};\r\n\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default {\r\n  fetchContacts,\r\n  addContact,\r\n  deleteContact,\r\n};\r\n","import React from 'react';\nimport s from './Filter.module.css';\nimport shortid from 'shortid';\n\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { changeFilter, getFilter } from 'redux/contacts';\n\nconst filterInputId = shortid.generate();\n\nconst Filter = () => {\n  const filter = useSelector(getFilter);\n\n  const dispatch = useDispatch();\n  const OnChangeFilter = e => dispatch(changeFilter(e.target.value));\n\n  return (\n    <label htmlFor={filterInputId}>\n      <span className={s.span}>Find contacts by name and number</span>\n      <input\n        className={s.input}\n        type=\"text\"\n        value={filter}\n        onChange={OnChangeFilter}\n        id={filterInputId}\n      />\n    </label>\n  );\n};\n\nexport default Filter;\n","import ContactForm from 'components/ContactForm';\r\nimport ContactList from 'components/ContactList';\r\nimport Filter from 'components/Filter';\r\nimport s from './ContactsView.module.css';\r\n\r\nfunction ContactsView() {\r\n  return (\r\n    <div className={s.container}>\r\n      <h1>Phonebook</h1>\r\n      <ContactForm />\r\n      <h2>Contacts</h2>\r\n      <Filter />\r\n      <ContactList />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ContactsView;\r\n"],"sourceRoot":""}